creami un database con questa struttura, e riempimi con valori reali le tablle Prodotti_Magazzino(200righe),Prodotti_Fornitori(600righe),Fornitori(50RIGHE), le altre due: StoricoV,StoricoR creami le tabelle ma lasciale vuote.Le tabelle sono Strutturate in questo modo:

Prodotti_Magazzino
-id_Prodotto(primaryKey)
-nome
-descrizione
-prezzo_Vendita
-disponibilità

Prodotti_Fornitori
-id_Fornitore(PrimaryKey)
-id_Prodotto(PrimaryKey)
-Prezzo_Acquisto
-pezzi_Disponibili

Fornitori
-id_Fornitore(PrimaryKey)
-nome
-email
-CoordinataX
-CoordinataY

StoricoV
-Periodo(PrimaryKey)
-Id_Prodotto(PrimaryKey)
-quantita_Venduta
-prezzo_venditaTot
-ricavato

StoricoR
-Periodo(PrimaryKey)
-Id_Prodotto(PrimaryKey)
-quantita_Acquistata
-Prezzo_Medio_Acquisto


codice:


-- MySQL 8.x — DB con struttura e dati richiesti
DROP DATABASE IF EXISTS negozio_dataset;
CREATE DATABASE negozio_dataset CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE negozio_dataset;

-- Parametri dimensione
SET @N_PRODOTTI   := 200;
SET @N_FORNITORI  := 50;
SET @OFFERTE_PER_PROD := 3;   -- 200 * 3 = 600 offerte

-- Ottimizzazioni per bulk load
SET @old_fk := @@FOREIGN_KEY_CHECKS;
SET @old_unique := @@UNIQUE_CHECKS;
SET @old_autocommit := @@AUTOCOMMIT;
SET FOREIGN_KEY_CHECKS = 0;
SET UNIQUE_CHECKS = 0;
SET AUTOCOMMIT = 0;

-- =========================
-- Struttura tabelle
-- =========================

CREATE TABLE Prodotti_Magazzino (
  id_Prodotto      INT UNSIGNED NOT NULL AUTO_INCREMENT,
  nome             VARCHAR(255) NOT NULL,
  descrizione      VARCHAR(255),
  prezzo_Vendita   DECIMAL(10,2) NOT NULL,
  disponibilita    INT UNSIGNED NOT NULL DEFAULT 0,
  created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id_Prodotto),
  KEY idx_prodotti_nome (nome),
  CHECK (prezzo_Vendita >= 0),
  CHECK (disponibilita >= 0)
) ENGINE=InnoDB;

CREATE TABLE Fornitori (
  id_Fornitore   INT UNSIGNED NOT NULL AUTO_INCREMENT,
  nome           VARCHAR(255) NOT NULL,
  email          VARCHAR(255) NOT NULL,
  CoordinataX    DECIMAL(9,6),  -- longitudine ~ Italia
  CoordinataY    DECIMAL(9,6),  -- latitudine ~ Italia
  created_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at     TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id_Fornitore),
  UNIQUE KEY uq_fornitori_email (email),
  KEY idx_fornitori_nome (nome)
) ENGINE=InnoDB;

CREATE TABLE Prodotti_Fornitori (
  id_Fornitore        INT UNSIGNED NOT NULL,
  id_Prodotto         INT UNSIGNED NOT NULL,
  Prezzo_Acquisto     DECIMAL(10,2) NOT NULL,
  pezzi_Disponibili   INT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (id_Fornitore, id_Prodotto),
  KEY idx_pf_prodotto (id_Prodotto),
  CHECK (Prezzo_Acquisto >= 0),
  CHECK (pezzi_Disponibili >= 0),
  CONSTRAINT fk_pf_fornitore FOREIGN KEY (id_Fornitore)
    REFERENCES Fornitori(id_Fornitore)
    ON DELETE CASCADE ON UPDATE RESTRICT,
  CONSTRAINT fk_pf_prodotto FOREIGN KEY (id_Prodotto)
    REFERENCES Prodotti_Magazzino(id_Prodotto)
    ON DELETE CASCADE ON UPDATE RESTRICT
) ENGINE=InnoDB;

CREATE TABLE StoricoV (
  Periodo             CHAR(7) NOT NULL,        -- 'YYYY-MM'
  Id_Prodotto         INT UNSIGNED NOT NULL,
  quantita_Venduta    INT UNSIGNED NOT NULL,
  prezzo_venditaTot   DECIMAL(12,2) NOT NULL,
  ricavato            DECIMAL(12,2) AS (prezzo_venditaTot) STORED,
  PRIMARY KEY (Periodo, Id_Prodotto),
  KEY idx_sv_prod (Id_Prodotto),
  CHECK (quantita_Venduta >= 0),
  CHECK (prezzo_venditaTot >= 0),
  CHECK (Periodo REGEXP '^[0-9]{4}-(0[1-9]|1[0-2])$'),
  CONSTRAINT fk_sv_prodotto FOREIGN KEY (Id_Prodotto)
    REFERENCES Prodotti_Magazzino(id_Prodotto)
    ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB;

CREATE TABLE StoricoR (
  Periodo                 CHAR(7) NOT NULL,   -- 'YYYY-MM'
  Id_Prodotto             INT UNSIGNED NOT NULL,
  quantita_Acquistata     INT UNSIGNED NOT NULL,
  Prezzo_Medio_Acquisto   DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (Periodo, Id_Prodotto),
  KEY idx_sr_prod (Id_Prodotto),
  CHECK (quantita_Acquistata >= 0),
  CHECK (Prezzo_Medio_Acquisto >= 0),
  CHECK (Periodo REGEXP '^[0-9]{4}-(0[1-9]|1[0-2])$'),
  CONSTRAINT fk_sr_prodotto FOREIGN KEY (Id_Prodotto)
    REFERENCES Prodotti_Magazzino(id_Prodotto)
    ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB;

-- =========================
-- Sequenza ausiliaria 1..1000 (in memoria)
-- =========================
DROP TEMPORARY TABLE IF EXISTS seq_1000;
CREATE TEMPORARY TABLE seq_1000 (n INT NOT NULL PRIMARY KEY) ENGINE=MEMORY;

INSERT INTO seq_1000 (n)
SELECT
  (u.n + t.n*10 + h.n*100) + 1 AS n
FROM
  (SELECT 0 n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
           UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) u
CROSS JOIN
  (SELECT 0 n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
           UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) t
CROSS JOIN
  (SELECT 0 n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
           UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) h;

-- =========================
-- Inserimento Fornitori (50 righe) con nomi/emails realistici e coordinate in Italia
-- =========================
INSERT INTO Fornitori (nome, email, CoordinataX, CoordinataY)
SELECT
  CONCAT('Fornitore ', LPAD(n,2,'0'), ' ',
         CASE MOD(n,10)
           WHEN 0 THEN 'Milano' WHEN 1 THEN 'Torino' WHEN 2 THEN 'Genova' WHEN 3 THEN 'Venezia' WHEN 4 THEN 'Bologna'
           WHEN 5 THEN 'Firenze' WHEN 6 THEN 'Roma' WHEN 7 THEN 'Napoli' WHEN 8 THEN 'Bari' WHEN 9 THEN 'Palermo' END,
         ' S.r.l.') AS nome,
  CONCAT('contatti.', LPAD(n,2,'0'), '@',
         CASE MOD(n,10)
           WHEN 0 THEN 'milano' WHEN 1 THEN 'torino' WHEN 2 THEN 'genova' WHEN 3 THEN 'venezia' WHEN 4 THEN 'bologna'
           WHEN 5 THEN 'firenze' WHEN 6 THEN 'roma' WHEN 7 THEN 'napoli' WHEN 8 THEN 'bari' WHEN 9 THEN 'palermo' END,
         '-supply.it') AS email,
  ROUND(
    (CASE MOD(n,10)
      WHEN 0 THEN 9.1900 WHEN 1 THEN 7.6869 WHEN 2 THEN 8.9463 WHEN 3 THEN 12.3155 WHEN 4 THEN 11.3426
      WHEN 5 THEN 11.2558 WHEN 6 THEN 12.4964 WHEN 7 THEN 14.2681 WHEN 8 THEN 16.8719 WHEN 9 THEN 13.3613 END)
    + ( (CAST(CRC32(CONCAT('lon', n)) AS SIGNED) % 1000 - 500) / 100000.0 )
  , 6) AS CoordinataX,
  ROUND(
    (CASE MOD(n,10)
      WHEN 0 THEN 45.4642 WHEN 1 THEN 45.0703 WHEN 2 THEN 44.4056 WHEN 3 THEN 45.4408 WHEN 4 THEN 44.4949
      WHEN 5 THEN 43.7696 WHEN 6 THEN 41.9028 WHEN 7 THEN 40.8518 WHEN 8 THEN 41.1171 WHEN 9 THEN 38.1157 END)
    + ( (CAST(CRC32(CONCAT('lat', n)) AS SIGNED) % 1000 - 500) / 100000.0 )
  , 6) AS CoordinataY
FROM seq_1000
WHERE n <= @N_FORNITORI;

-- =========================
-- Inserimento Prodotti_Magazzino (200 righe) con nomi/descrizioni e prezzi realistici
-- =========================
INSERT INTO Prodotti_Magazzino (nome, descrizione, prezzo_Vendita, disponibilita)
SELECT
  CONCAT(
    CASE MOD(n,20)
      WHEN 0  THEN 'Acqua naturale 1L'
      WHEN 1  THEN 'Acqua frizzante 1L'
      WHEN 2  THEN 'Pasta Fusilli 500g'
      WHEN 3  THEN 'Pasta Spaghetti 500g'
      WHEN 4  THEN 'Riso Carnaroli 1kg'
      WHEN 5  THEN 'Biscotti frollini 250g'
      WHEN 6  THEN 'Caffè macinato 250g'
      WHEN 7  THEN 'Olio extravergine 1L'
      WHEN 8  THEN 'Zucchero 1kg'
      WHEN 9  THEN 'Sale fino 1kg'
      WHEN 10 THEN 'Latte UHT 1L'
      WHEN 11 THEN 'Tonno in scatola 3x80g'
      WHEN 12 THEN 'Passata di pomodoro 700g'
      WHEN 13 THEN 'Detersivo piatti 1L'
      WHEN 14 THEN 'Shampoo 400ml'
      WHEN 15 THEN 'Carta igienica 4 rotoli'
      WHEN 16 THEN 'Farina 1kg'
      WHEN 17 THEN 'Cioccolato fondente 100g'
      WHEN 18 THEN 'Patatine classiche 150g'
      WHEN 19 THEN 'Marmellata di albicocche 350g'
    END,
    ' - Marca ',
    CHAR(65 + MOD(n,5)),     -- Marca A..E
    ' #', LPAD(n,3,'0')
  ) AS nome,
  CONCAT(
    'Prodotto ',
    CASE MOD(n,20)
      WHEN 0  THEN 'bevande'
      WHEN 1  THEN 'bevande'
      WHEN 2  THEN 'pasta'
      WHEN 3  THEN 'pasta'
      WHEN 4  THEN 'riso'
      WHEN 5  THEN 'biscotti'
      WHEN 6  THEN 'caffe'
      WHEN 7  THEN 'olio'
      WHEN 8  THEN 'drogheria'
      WHEN 9  THEN 'drogheria'
      WHEN 10 THEN 'latticini'
      WHEN 11 THEN 'scatolame'
      WHEN 12 THEN 'conserve'
      WHEN 13 THEN 'cura casa'
      WHEN 14 THEN 'cura persona'
      WHEN 15 THEN 'carta'
      WHEN 16 THEN 'drogheria'
      WHEN 17 THEN 'dolci'
      WHEN 18 THEN 'snack'
      WHEN 19 THEN 'confetture'
    END,
    '; lotto standard; origine IT/EU'
  ) AS descrizione,
  -- prezzo base per categoria + piccola variazione deterministica
  ROUND(
    (CASE MOD(n,20)
      WHEN 0  THEN 0.60
      WHEN 1  THEN 0.65
      WHEN 2  THEN 0.95
      WHEN 3  THEN 0.99
      WHEN 4  THEN 2.49
      WHEN 5  THEN 1.39
      WHEN 6  THEN 3.20
      WHEN 7  THEN 6.90
      WHEN 8  THEN 1.19
      WHEN 9  THEN 0.39
      WHEN 10 THEN 1.29
      WHEN 11 THEN 4.20
      WHEN 12 THEN 1.29
      WHEN 13 THEN 1.49
      WHEN 14 THEN 2.89
      WHEN 15 THEN 2.49
      WHEN 16 THEN 0.89
      WHEN 17 THEN 1.59
      WHEN 18 THEN 1.49
      WHEN 19 THEN 2.79
    END) + (MOD(n*37, 100) / 100.0), 2) AS prezzo_Vendita,
  (CAST(CRC32(CONCAT('stock', n)) AS UNSIGNED) % 1000) AS disponibilita
FROM seq_1000
WHERE n <= @N_PRODOTTI;

-- =========================
-- Inserimento Prodotti_Fornitori (600 righe): 3 offerte per prodotto
-- Prezzo acquisto < prezzo vendita; pezzi disponibili realistici
-- =========================
-- Tabella ausiliaria per k=1..3
DROP TEMPORARY TABLE IF EXISTS k3;
CREATE TEMPORARY TABLE k3 (k INT PRIMARY KEY) ENGINE=MEMORY;
INSERT INTO k3 VALUES (1),(2),(3);

INSERT INTO Prodotti_Fornitori (id_Fornitore, id_Prodotto, Prezzo_Acquisto, pezzi_Disponibili)
SELECT
  1 + MOD(p.id_Prodotto*97 + k3.k, @N_FORNITORI) AS id_Fornitore,
  p.id_Prodotto,
  LEAST(
    ROUND(
      p.prezzo_Vendita * (0.45 + (k3.k * 0.05) + (MOD(p.id_Prodotto*11, 20) / 1000.0))
    , 2),
    p.prezzo_Vendita - 0.05
  ) AS Prezzo_Acquisto,
  (200 + (CAST(CRC32(CONCAT('pf', p.id_Prodotto, '_', k3.k)) AS UNSIGNED) % 1801)) AS pezzi_Disponibili
FROM Prodotti_Magazzino p
JOIN k3
WHERE p.id_Prodotto <= @N_PRODOTTI;

-- =========================
-- Verifiche conteggio
-- =========================
SELECT 'Fornitori' AS tab, COUNT(*) AS n FROM Fornitori
UNION ALL SELECT 'Prodotti_Magazzino', COUNT(*) FROM Prodotti_Magazzino
UNION ALL SELECT 'Prodotti_Fornitori', COUNT(*) FROM Prodotti_Fornitori
UNION ALL SELECT 'StoricoV (vuota)', COUNT(*) FROM StoricoV
UNION ALL SELECT 'StoricoR (vuota)', COUNT(*) FROM StoricoR;

COMMIT;

-- Ripristino impostazioni
SET FOREIGN_KEY_CHECKS = @old_fk;
SET UNIQUE_CHECKS = @old_unique;
SET AUTOCOMMIT = @old_autocommit;